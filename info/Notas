
############################################################
#                 DOCKER                                   #
############################################################

#### Docker engine:
# arquitecture 
	Consta de un docker daemon, una API para interaccionar con dockerd y una CLI para usar la API

	Docker daemon: dockerd
		Daemon que escucha al cliente y maneja Docker obeject
		Imagenes, containers, networks, volumes.
		Tambien puede comunicarse con otros daemon para manejar servicios.


	Docker Client: docker
		Interacciones del usuario con el demonio.
		ej:  para enviar a dockerd el comando run
			docker run

	Docker registries:
		Almacena docker images.
		Docker Hub  es public registry donde Docker

		 busca por defecto
		Al ejecutar comandos como docker pull o docker run  
		Docker pulls las imagenes requeridas del registry configurado
		con Docker push, docker push tu imagen

		Registro vs repositorio
			registro: ubicacion centralizada que almacena y administra imagenes de contenedores
			repositorio: coleccion de imagenes de contenedores rela

	Docker objects:
		Images:
			read-only template con las intrucciones para crear un contenedor.
			Para crear una imagen Doceker hay que ecribir un archivo Dockerfile.
			Each instruction in a Dockerfile creates a layer in the image
		Containers:
			A container is a runnable instance of an image.
			You can create, start, stop, move, or delete a container.

			Por defecto un container esta aislado del resto de la maquina host.
			You can control how isolated a container's network, storage, or other 
			underlying subsystems are from other containers or from the host machine.

			Ademas de su imagen, el contenedor se define por sus configuration opntions
			dadas al iniciar el contenedor. Al eliminar el contenedor estas opciones son
			eliminadas. When a container is removed, any changes to its state that aren't
			stored in persistent storage disappear.
			- Ejemplo
				docker run -i -t ubuntu /bin/bash
				1. si no tines imagen de ubuntu en local. Hace "docker pull ubuntu"
						del registro especificado.
				2. crea un nuevo contenedor "docker container create"
				3. se aloca un read-write  filesystem para el contenedor.4
				4. Docker creates a network interface to connect the container to the default network
						Si no se especica ninguna opcion. Asigna IP addr al contenedor
				5. Docker starts the container and executes /bin/bash
						(-i correr intectivamente y -t anclado a la terminal)
				6. al correr exit terminas /bin/bash el container stop. Pero no eliminado.

		Networks
		Volumes
		Plugins
		other


	puntos clave de los  contenedores:
		- Son autonomos y tienen todo lo necesario para funcionar las dependencias de la maquina host
		- Estan aislados y se ejecutan de forman aislada 
		- Independiente, cada contenedor se administra de forma independiente. La eliminación de uno no afecta al resto
		- Portatil, los contenedores pueden desplegarse en cualquier plataforma con docker.

	Hay dos principios de las imagenes
		Son inmutables, una vez creadas no pueden modificarse, solo se puede crear una nueva
		Las imagenes se componen de capas, cada una representa una cinjunto de comabios  hello 

#### Storage
	https://docs.docker.com/engine/storage/
	Los archivos creados en un contenedor se almacenan en capa con permisos de escritura.
	-	No persisten cuando el contenedor no existe
	-	Para poder read y write en esta capa hay que manejar driver de almacenamiento.

	Docker tiene dos opciones para almacenar archivos en la maquina host para que persistan tras 
	despues de que el contenedor se detenga.
		- volumenes: se almacenan en una parte del host administrada por docker, los procesos no docker  no interaccionan con esta región.
		- blind mounts: almacenados en cualquier parte del sistema host,  los procesos del host pueden accaeder a esta región y modificarla.
	Docker tambien puede almacenar archivos en la memoria host, aunque estos no sean persistentes
		- tmpfs

	# volumes
		manejados con 'docker volumme create' 
#### Network
	Habilidad de los contenedores de conectarse con otros o con elementos no-Docker.
	Puede crear redes personalizadas definidas por el usuario y conectar varios contenedores a la misma red. Una vez conectados a una red definida por el usuario, los contenedores pueden comunicarse entre sí mediante direcciones IP o nombres de contenedor.


#### Docker compose:
	modelo de aplicación de compose:
		los componenetes se definen como sevicios. Un servicio es una instancia de una imagen contenedor+configuración
		
		Los servicios se comunicas entre si mediante redes. Una red es una abstracción de la capacidad de la plataforma para establecer una ruta IP entre contenedores dentro de servicios conectados entre sí.

		Los servicios almacenan y comparten datos persistentes en volúmenes . La especificación describe dichos datos persistentes como un montaje de sistema de archivos de alto nivel con opciones globales.

		Algunos servicios requieren datos de configuración que dependen del entorno de ejecución o de la plataforma. Para ello, la Especificación define un concepto de configuraciones dedicado

		Un secreto es un tipo específico de datos de configuración para datos confidenciales que no deben exponerse sin consideraciones de seguridad.

		Un proyecto es una implementación individual de una especificación de aplicación en una plataforma. El nombre de un proyecto, establecido con el nameatributo de nivel superior, se utiliza para agrupar recursos y aislarlos de otras aplicaciones u otras instalaciones de la misma aplicación especificada por Compose con parámetros distintos.
		
Docker file syntax:
	https://docs.docker.com/reference/dockerfile/
	- ADD						Add local or remote files and directories.
	- ARG						Use build-time variables.
	- CMD						Specify default commands.
	- COPY					Copy files and directories.
	- ENTRYPOINT		Specify default executable.
	- ENV						Set environment variables.
	- EXPOSE				Describe which ports your application is listening on.
	- FROM					Create a new build stage from a base image.
	- HEALTHCHECK		Check a container's health on startup.
	- LABEL					Add metadata to an image.
	- MAINTAINER		Specify the author of an image.
	- ONBUILD				Specify instructions for when the image is used in a build.
	- RUN						Execute build commands.
	- SHELL					Set the default shell of an image.
	- STOPSIGNAL		Specify the system call signal for exiting a container.
	- USER					Set user and group ID.
	- VOLUME				Create volume mounts.
	- WORKDIR				Change working directory.

	##### Grammar
  '''
	# Comment
	INSTRUCTION arguments
  '''
	not case-sensitive convention is for them to be UPPERCASE to distinguish them from arguments more easily.
	runs instructions in a Dockerfile in order
	A Dockerfile must begin with a FROM instruction. (Puede ir despues de cmd, global ARGs, parser directivas)
	FROM  spevifies the parent image desde la que construlles.





Best Practices writing Dockerfiles:
https://platformengineers.io/blog/best-practices-for-writing-dockerfiles/
	1. Use a minimal base image
	2. Use multi-stage builds
	3. Use the .dockerignore file
	4. Use environment variables
	5. Use the COPY command carefully
	6. Use the RUN command to install dependencies
	7. Use the ENTRYPOINT command
	8. Use the HEALTHCHECK command
	9. Use the USER command
	10. Use the VOLUME command



Language-specific guides overview:


############################################################
#                 NGINX                                    #
############################################################

############################################################
#                 WORDPRESS/PHP                            #
############################################################

############################################################
#                 MARIADB                                  #
############################################################

############################################################
#                 PID1/SYSTEMD                             #
############################################################

############################################################
#                 NAMESPACES                               #
############################################################
